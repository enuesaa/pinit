// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/enuesaa/pinit/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/enuesaa/pinit/internal/ent/action"
	"github.com/enuesaa/pinit/internal/ent/appconf"
	"github.com/enuesaa/pinit/internal/ent/binder"
	"github.com/enuesaa/pinit/internal/ent/note"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Action is the client for interacting with the Action builders.
	Action *ActionClient
	// Appconf is the client for interacting with the Appconf builders.
	Appconf *AppconfClient
	// Binder is the client for interacting with the Binder builders.
	Binder *BinderClient
	// Note is the client for interacting with the Note builders.
	Note *NoteClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Action = NewActionClient(c.config)
	c.Appconf = NewAppconfClient(c.config)
	c.Binder = NewBinderClient(c.config)
	c.Note = NewNoteClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Action:  NewActionClient(cfg),
		Appconf: NewAppconfClient(cfg),
		Binder:  NewBinderClient(cfg),
		Note:    NewNoteClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Action:  NewActionClient(cfg),
		Appconf: NewAppconfClient(cfg),
		Binder:  NewBinderClient(cfg),
		Note:    NewNoteClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Action.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Action.Use(hooks...)
	c.Appconf.Use(hooks...)
	c.Binder.Use(hooks...)
	c.Note.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Action.Intercept(interceptors...)
	c.Appconf.Intercept(interceptors...)
	c.Binder.Intercept(interceptors...)
	c.Note.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActionMutation:
		return c.Action.mutate(ctx, m)
	case *AppconfMutation:
		return c.Appconf.mutate(ctx, m)
	case *BinderMutation:
		return c.Binder.mutate(ctx, m)
	case *NoteMutation:
		return c.Note.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActionClient is a client for the Action schema.
type ActionClient struct {
	config
}

// NewActionClient returns a client for the Action from the given config.
func NewActionClient(c config) *ActionClient {
	return &ActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `action.Hooks(f(g(h())))`.
func (c *ActionClient) Use(hooks ...Hook) {
	c.hooks.Action = append(c.hooks.Action, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `action.Intercept(f(g(h())))`.
func (c *ActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Action = append(c.inters.Action, interceptors...)
}

// Create returns a builder for creating a Action entity.
func (c *ActionClient) Create() *ActionCreate {
	mutation := newActionMutation(c.config, OpCreate)
	return &ActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Action entities.
func (c *ActionClient) CreateBulk(builders ...*ActionCreate) *ActionCreateBulk {
	return &ActionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActionClient) MapCreateBulk(slice any, setFunc func(*ActionCreate, int)) *ActionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActionCreateBulk{err: fmt.Errorf("calling to ActionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Action.
func (c *ActionClient) Update() *ActionUpdate {
	mutation := newActionMutation(c.config, OpUpdate)
	return &ActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActionClient) UpdateOne(a *Action) *ActionUpdateOne {
	mutation := newActionMutation(c.config, OpUpdateOne, withAction(a))
	return &ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActionClient) UpdateOneID(id uint) *ActionUpdateOne {
	mutation := newActionMutation(c.config, OpUpdateOne, withActionID(id))
	return &ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Action.
func (c *ActionClient) Delete() *ActionDelete {
	mutation := newActionMutation(c.config, OpDelete)
	return &ActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActionClient) DeleteOne(a *Action) *ActionDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActionClient) DeleteOneID(id uint) *ActionDeleteOne {
	builder := c.Delete().Where(action.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActionDeleteOne{builder}
}

// Query returns a query builder for Action.
func (c *ActionClient) Query() *ActionQuery {
	return &ActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAction},
		inters: c.Interceptors(),
	}
}

// Get returns a Action entity by its id.
func (c *ActionClient) Get(ctx context.Context, id uint) (*Action, error) {
	return c.Query().Where(action.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActionClient) GetX(ctx context.Context, id uint) *Action {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ActionClient) Hooks() []Hook {
	return c.hooks.Action
}

// Interceptors returns the client interceptors.
func (c *ActionClient) Interceptors() []Interceptor {
	return c.inters.Action
}

func (c *ActionClient) mutate(ctx context.Context, m *ActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Action mutation op: %q", m.Op())
	}
}

// AppconfClient is a client for the Appconf schema.
type AppconfClient struct {
	config
}

// NewAppconfClient returns a client for the Appconf from the given config.
func NewAppconfClient(c config) *AppconfClient {
	return &AppconfClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appconf.Hooks(f(g(h())))`.
func (c *AppconfClient) Use(hooks ...Hook) {
	c.hooks.Appconf = append(c.hooks.Appconf, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appconf.Intercept(f(g(h())))`.
func (c *AppconfClient) Intercept(interceptors ...Interceptor) {
	c.inters.Appconf = append(c.inters.Appconf, interceptors...)
}

// Create returns a builder for creating a Appconf entity.
func (c *AppconfClient) Create() *AppconfCreate {
	mutation := newAppconfMutation(c.config, OpCreate)
	return &AppconfCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Appconf entities.
func (c *AppconfClient) CreateBulk(builders ...*AppconfCreate) *AppconfCreateBulk {
	return &AppconfCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppconfClient) MapCreateBulk(slice any, setFunc func(*AppconfCreate, int)) *AppconfCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppconfCreateBulk{err: fmt.Errorf("calling to AppconfClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppconfCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppconfCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Appconf.
func (c *AppconfClient) Update() *AppconfUpdate {
	mutation := newAppconfMutation(c.config, OpUpdate)
	return &AppconfUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppconfClient) UpdateOne(a *Appconf) *AppconfUpdateOne {
	mutation := newAppconfMutation(c.config, OpUpdateOne, withAppconf(a))
	return &AppconfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppconfClient) UpdateOneID(id uint) *AppconfUpdateOne {
	mutation := newAppconfMutation(c.config, OpUpdateOne, withAppconfID(id))
	return &AppconfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Appconf.
func (c *AppconfClient) Delete() *AppconfDelete {
	mutation := newAppconfMutation(c.config, OpDelete)
	return &AppconfDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppconfClient) DeleteOne(a *Appconf) *AppconfDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppconfClient) DeleteOneID(id uint) *AppconfDeleteOne {
	builder := c.Delete().Where(appconf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppconfDeleteOne{builder}
}

// Query returns a query builder for Appconf.
func (c *AppconfClient) Query() *AppconfQuery {
	return &AppconfQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppconf},
		inters: c.Interceptors(),
	}
}

// Get returns a Appconf entity by its id.
func (c *AppconfClient) Get(ctx context.Context, id uint) (*Appconf, error) {
	return c.Query().Where(appconf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppconfClient) GetX(ctx context.Context, id uint) *Appconf {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppconfClient) Hooks() []Hook {
	return c.hooks.Appconf
}

// Interceptors returns the client interceptors.
func (c *AppconfClient) Interceptors() []Interceptor {
	return c.inters.Appconf
}

func (c *AppconfClient) mutate(ctx context.Context, m *AppconfMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppconfCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppconfUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppconfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppconfDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Appconf mutation op: %q", m.Op())
	}
}

// BinderClient is a client for the Binder schema.
type BinderClient struct {
	config
}

// NewBinderClient returns a client for the Binder from the given config.
func NewBinderClient(c config) *BinderClient {
	return &BinderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `binder.Hooks(f(g(h())))`.
func (c *BinderClient) Use(hooks ...Hook) {
	c.hooks.Binder = append(c.hooks.Binder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `binder.Intercept(f(g(h())))`.
func (c *BinderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Binder = append(c.inters.Binder, interceptors...)
}

// Create returns a builder for creating a Binder entity.
func (c *BinderClient) Create() *BinderCreate {
	mutation := newBinderMutation(c.config, OpCreate)
	return &BinderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Binder entities.
func (c *BinderClient) CreateBulk(builders ...*BinderCreate) *BinderCreateBulk {
	return &BinderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BinderClient) MapCreateBulk(slice any, setFunc func(*BinderCreate, int)) *BinderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BinderCreateBulk{err: fmt.Errorf("calling to BinderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BinderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BinderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Binder.
func (c *BinderClient) Update() *BinderUpdate {
	mutation := newBinderMutation(c.config, OpUpdate)
	return &BinderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BinderClient) UpdateOne(b *Binder) *BinderUpdateOne {
	mutation := newBinderMutation(c.config, OpUpdateOne, withBinder(b))
	return &BinderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BinderClient) UpdateOneID(id uint) *BinderUpdateOne {
	mutation := newBinderMutation(c.config, OpUpdateOne, withBinderID(id))
	return &BinderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Binder.
func (c *BinderClient) Delete() *BinderDelete {
	mutation := newBinderMutation(c.config, OpDelete)
	return &BinderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BinderClient) DeleteOne(b *Binder) *BinderDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BinderClient) DeleteOneID(id uint) *BinderDeleteOne {
	builder := c.Delete().Where(binder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BinderDeleteOne{builder}
}

// Query returns a query builder for Binder.
func (c *BinderClient) Query() *BinderQuery {
	return &BinderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBinder},
		inters: c.Interceptors(),
	}
}

// Get returns a Binder entity by its id.
func (c *BinderClient) Get(ctx context.Context, id uint) (*Binder, error) {
	return c.Query().Where(binder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BinderClient) GetX(ctx context.Context, id uint) *Binder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BinderClient) Hooks() []Hook {
	return c.hooks.Binder
}

// Interceptors returns the client interceptors.
func (c *BinderClient) Interceptors() []Interceptor {
	return c.inters.Binder
}

func (c *BinderClient) mutate(ctx context.Context, m *BinderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BinderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BinderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BinderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BinderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Binder mutation op: %q", m.Op())
	}
}

// NoteClient is a client for the Note schema.
type NoteClient struct {
	config
}

// NewNoteClient returns a client for the Note from the given config.
func NewNoteClient(c config) *NoteClient {
	return &NoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `note.Hooks(f(g(h())))`.
func (c *NoteClient) Use(hooks ...Hook) {
	c.hooks.Note = append(c.hooks.Note, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `note.Intercept(f(g(h())))`.
func (c *NoteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Note = append(c.inters.Note, interceptors...)
}

// Create returns a builder for creating a Note entity.
func (c *NoteClient) Create() *NoteCreate {
	mutation := newNoteMutation(c.config, OpCreate)
	return &NoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Note entities.
func (c *NoteClient) CreateBulk(builders ...*NoteCreate) *NoteCreateBulk {
	return &NoteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NoteClient) MapCreateBulk(slice any, setFunc func(*NoteCreate, int)) *NoteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NoteCreateBulk{err: fmt.Errorf("calling to NoteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NoteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Note.
func (c *NoteClient) Update() *NoteUpdate {
	mutation := newNoteMutation(c.config, OpUpdate)
	return &NoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NoteClient) UpdateOne(n *Note) *NoteUpdateOne {
	mutation := newNoteMutation(c.config, OpUpdateOne, withNote(n))
	return &NoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NoteClient) UpdateOneID(id uint) *NoteUpdateOne {
	mutation := newNoteMutation(c.config, OpUpdateOne, withNoteID(id))
	return &NoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Note.
func (c *NoteClient) Delete() *NoteDelete {
	mutation := newNoteMutation(c.config, OpDelete)
	return &NoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NoteClient) DeleteOne(n *Note) *NoteDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NoteClient) DeleteOneID(id uint) *NoteDeleteOne {
	builder := c.Delete().Where(note.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NoteDeleteOne{builder}
}

// Query returns a query builder for Note.
func (c *NoteClient) Query() *NoteQuery {
	return &NoteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNote},
		inters: c.Interceptors(),
	}
}

// Get returns a Note entity by its id.
func (c *NoteClient) Get(ctx context.Context, id uint) (*Note, error) {
	return c.Query().Where(note.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NoteClient) GetX(ctx context.Context, id uint) *Note {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NoteClient) Hooks() []Hook {
	return c.hooks.Note
}

// Interceptors returns the client interceptors.
func (c *NoteClient) Interceptors() []Interceptor {
	return c.inters.Note
}

func (c *NoteClient) mutate(ctx context.Context, m *NoteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NoteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NoteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NoteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Note mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Action, Appconf, Binder, Note []ent.Hook
	}
	inters struct {
		Action, Appconf, Binder, Note []ent.Interceptor
	}
)
