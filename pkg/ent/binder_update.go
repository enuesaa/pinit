// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/enuesaa/pinit/pkg/ent/binder"
	"github.com/enuesaa/pinit/pkg/ent/predicate"
)

// BinderUpdate is the builder for updating Binder entities.
type BinderUpdate struct {
	config
	hooks    []Hook
	mutation *BinderMutation
}

// Where appends a list predicates to the BinderUpdate builder.
func (bu *BinderUpdate) Where(ps ...predicate.Binder) *BinderUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BinderUpdate) SetName(s string) *BinderUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BinderUpdate) SetNillableName(s *string) *BinderUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetCategory sets the "category" field.
func (bu *BinderUpdate) SetCategory(s string) *BinderUpdate {
	bu.mutation.SetCategory(s)
	return bu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (bu *BinderUpdate) SetNillableCategory(s *string) *BinderUpdate {
	if s != nil {
		bu.SetCategory(*s)
	}
	return bu
}

// SetArchivedAt sets the "archived_at" field.
func (bu *BinderUpdate) SetArchivedAt(t time.Time) *BinderUpdate {
	bu.mutation.SetArchivedAt(t)
	return bu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (bu *BinderUpdate) SetNillableArchivedAt(t *time.Time) *BinderUpdate {
	if t != nil {
		bu.SetArchivedAt(*t)
	}
	return bu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (bu *BinderUpdate) ClearArchivedAt() *BinderUpdate {
	bu.mutation.ClearArchivedAt()
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BinderUpdate) SetUpdatedAt(t time.Time) *BinderUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// Mutation returns the BinderMutation object of the builder.
func (bu *BinderUpdate) Mutation() *BinderMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BinderUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BinderUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BinderUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BinderUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BinderUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := binder.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BinderUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := binder.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Binder.name": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Category(); ok {
		if err := binder.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Binder.category": %w`, err)}
		}
	}
	return nil
}

func (bu *BinderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(binder.Table, binder.Columns, sqlgraph.NewFieldSpec(binder.FieldID, field.TypeUint))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(binder.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Category(); ok {
		_spec.SetField(binder.FieldCategory, field.TypeString, value)
	}
	if value, ok := bu.mutation.ArchivedAt(); ok {
		_spec.SetField(binder.FieldArchivedAt, field.TypeTime, value)
	}
	if bu.mutation.ArchivedAtCleared() {
		_spec.ClearField(binder.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(binder.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BinderUpdateOne is the builder for updating a single Binder entity.
type BinderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BinderMutation
}

// SetName sets the "name" field.
func (buo *BinderUpdateOne) SetName(s string) *BinderUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BinderUpdateOne) SetNillableName(s *string) *BinderUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetCategory sets the "category" field.
func (buo *BinderUpdateOne) SetCategory(s string) *BinderUpdateOne {
	buo.mutation.SetCategory(s)
	return buo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (buo *BinderUpdateOne) SetNillableCategory(s *string) *BinderUpdateOne {
	if s != nil {
		buo.SetCategory(*s)
	}
	return buo
}

// SetArchivedAt sets the "archived_at" field.
func (buo *BinderUpdateOne) SetArchivedAt(t time.Time) *BinderUpdateOne {
	buo.mutation.SetArchivedAt(t)
	return buo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (buo *BinderUpdateOne) SetNillableArchivedAt(t *time.Time) *BinderUpdateOne {
	if t != nil {
		buo.SetArchivedAt(*t)
	}
	return buo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (buo *BinderUpdateOne) ClearArchivedAt() *BinderUpdateOne {
	buo.mutation.ClearArchivedAt()
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BinderUpdateOne) SetUpdatedAt(t time.Time) *BinderUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// Mutation returns the BinderMutation object of the builder.
func (buo *BinderUpdateOne) Mutation() *BinderMutation {
	return buo.mutation
}

// Where appends a list predicates to the BinderUpdate builder.
func (buo *BinderUpdateOne) Where(ps ...predicate.Binder) *BinderUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BinderUpdateOne) Select(field string, fields ...string) *BinderUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Binder entity.
func (buo *BinderUpdateOne) Save(ctx context.Context) (*Binder, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BinderUpdateOne) SaveX(ctx context.Context) *Binder {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BinderUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BinderUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BinderUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := binder.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BinderUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := binder.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Binder.name": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Category(); ok {
		if err := binder.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Binder.category": %w`, err)}
		}
	}
	return nil
}

func (buo *BinderUpdateOne) sqlSave(ctx context.Context) (_node *Binder, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(binder.Table, binder.Columns, sqlgraph.NewFieldSpec(binder.FieldID, field.TypeUint))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Binder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, binder.FieldID)
		for _, f := range fields {
			if !binder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != binder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(binder.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Category(); ok {
		_spec.SetField(binder.FieldCategory, field.TypeString, value)
	}
	if value, ok := buo.mutation.ArchivedAt(); ok {
		_spec.SetField(binder.FieldArchivedAt, field.TypeTime, value)
	}
	if buo.mutation.ArchivedAtCleared() {
		_spec.ClearField(binder.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(binder.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Binder{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
